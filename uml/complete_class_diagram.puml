@startuml Complete Class Diagram

' Player-related classes
class Player {
  ' Key attributes
  - normalTexture: sf::Texture
  - fireTexture: sf::Texture
  - sprite: sf::Sprite
  - mouvement: Mouvement
  - bool big
  - bool hasFirePower
  - std::vector<Fireball> fireballs
  - int lives
  - int score
  - float initialX, initialY
  - float deathX, deathY
  - int lastLifeThreshold
  - bool isStarPowered
  - int hitTimer
  
  ' Key methods
  + update()
  + draw()
  + collectFireFlower()
  + shootFireball()
  + grow()
  + shrink()
  + die()
  + respawn()
  + addScore(points: int)
  + loseLife()
  + collectEtoile()
  + shouldRespawn()
  + getIsDead()
}

class Mouvement {
  - sf::Sprite& sprite
  - float speed
  - bool isJumping
  - float velocityY
  
  + moveRight()
  + moveLeft()
  + jump()
  + applyGravity()
}

' Enemy-related classes
abstract class Enemy {
  # texture: sf::Texture
  # sprite: sf::Sprite
  # mouvement: Mouvement
  # bool alive
  
  + {abstract} onJumpedOn()
  + interactWithPlayer()
  + update()
  + isAlive()
}

class Goomba {
  + onJumpedOn()
  + interactWithPlayer()
}

class KoopaTroopa {
  - bool inShellState
  + onJumpedOn()
  + interactWithPlayer()
}

class FriendlyMushroom {
  + onJumpedOn()
  + interactWithPlayer()
}

' Item classes
class Coin {
  - sprite: sf::Sprite
  - bool collected
  
  + draw()
  + collect()
  + isCollected()
}

class FireFlower {
  - sprite: sf::Sprite
  - bool collected
  
  + draw()
  + collect()
}

class Fireball {
  - sprite: sf::Sprite
  - velocityX: float
  - active: bool
  
  + update()
  + destroy()
}

class Etoile {
  - sprite: sf::Sprite
  - bool collected
  
  + draw()
  + collect()
}

' Game management classes
class Game {
  - bool isOver
  - int winner
  - bool aiDead_
  - std::vector<sf::Text> results
  
  + handleWin(playerId: int)
  + isGameOver()
  + drawResult(window: sf::RenderWindow&)
  + handleAIDeath()
}

class Background {
  - groundTiles: vector<sf::Sprite>
  - pipes: vector<sf::Sprite>
  - flag: sf::Sprite
  - gaps: vector<sf::FloatRect>
  - questionBlocks: vector<sf::Sprite>
  
  + draw()
  + getGroundTiles()
  + getPipes()
  + getGaps()
  + getQuestionBlocks()
}

class Camera {
  - view: sf::View
  
  + setCenter()
  + getView()
}

class Menu {
  - options: vector<sf::Text>
  - selectedItemIndex: int
  
  + draw()
  + moveUp()
  + moveDown()
}

class AIPlayer {
  - Player* character
  - vector<const Enemy*> enemies
  - bool shouldJump
  - bool shouldMoveRight
  - bool shouldMoveLeft
  - bool shouldShootFireball
  
  + update()
  + makeDecision()
  + avoidEnemies()
}

class Score {
  - sf::Sprite icon
  - sf::Text scoreText
  - int score
  
  + update(newScore: int)
  + draw(window: sf::RenderWindow&)
}

' Relationships
Player -- Mouvement : has >
Player -- Fireball : contains >

Enemy <|-- Goomba
Enemy <|-- KoopaTroopa
Enemy <|-- FriendlyMushroom
Enemy -- Mouvement : has >

AIPlayer -- Player : controls >
AIPlayer -- Enemy : tracks >

Game -- Player : manages >
Game -- Enemy : manages >

@enduml
