@startuml Complete_Architecture

' Use better styling
skinparam classFontSize 12
skinparam classAttributeFontSize 11
skinparam classFontStyle bold
skinparam packageStyle rectangle
skinparam packageFontSize 14

package "Core Game" {
  class Game {
    - bool isOver
    - int winner
    - bool aiDead_
    - sf::Font font
    - std::vector<sf::Text> results
    
    + Game()
    + handleWin(playerId: int): void
    + isGameOver(): bool
    + drawResult(window: sf::RenderWindow&): void
    + handleAIDeath(): void
    + isAIDead(): bool
  }

  class Menu {
    - sf::Font font
    - std::vector<sf::Text> menuOptions
    - int selectedIndex
    - sf::RectangleShape selector
    - std::vector<sf::Texture> frames
    - sf::Sprite backgroundSprite
    - sf::Clock frameClock
    - int currentFrame
    
    + Menu(width: float, height: float)
    + draw(window: sf::RenderWindow&): void
    + moveUp(): void
    + moveDown(): void
    + getSelectedIndex(): int
    + showRules(): void
  }

  class Camera {
    - sf::View view
    - float defaultWidth, defaultHeight
    - float minX, maxX, minY, maxY
    
    + Camera(width: float, height: float)
    + update(windowSize: sf::Vector2u): void
    + getView(): const sf::View&
    + setCenter(x: float, y: float): void
    - clampPosition(x: float&, y: float&): void
  }

  class Background {
    - sf::RectangleShape sky
    - std::vector<sf::Sprite> groundTiles
    - std::vector<sf::Sprite> questionBlocks
    - std::vector<sf::Sprite> pipes
    - std::vector<sf::Sprite> hills
    - std::vector<sf::Sprite> clouds
    - std::vector<sf::FloatRect> gaps
    - sf::Sprite flag
    
    + Background()
    + draw(window: sf::RenderWindow&): void
    + getGroundTiles(): const std::vector<sf::Sprite>&
    + getPipes(): const std::vector<sf::Sprite>&
    + getQuestionBlocks(): const std::vector<sf::Sprite>&
    + getFlag(): const sf::Sprite&
    + getGaps(): std::vector<sf::FloatRect>
    - loadMap(filePath: string): void
  }

  class Score {
    - sf::Texture iconTexture
    - sf::Texture heartTexture
    - sf::Sprite icon
    - sf::Text scoreText
    - sf::Font font
    - bool isLivesDisplay
    - std::vector<sf::Sprite> hearts
    - const int MAX_HEARTS = 5
    
    + Score(iconPath: string, font: sf::Font&, isLivesDisplay: bool)
    + setPosition(x: float, y: float): void
    + update(value: int): void
    + draw(window: sf::RenderWindow&): void
  }
}

package "Player System" {
  class Player {
    - static const int MAX_LIVES = 5
    - sf::Texture normalTexture
    - sf::Texture fireTexture
    - sf::Sprite sprite
    - std::string characterName
    - Mouvement mouvement
    - bool big
    - bool isDead
    - bool hasFirePower
    - int lives
    - int coins
    - int score
    - std::vector<Fireball> fireballs
    - bool isStarPowered
    - int starPowerFrames
    - float baseSpeed
    - float currentSpeed
    - float deathX, deathY
    
    + Player(texturePath: string, name: string, x: float, y: float, speed: float, ...)
    + update(blocks: vector<sf::Sprite>&, ...): void
    + draw(window: sf::RenderWindow&): void
    + animate(): void
    + moveRight(): void
    + moveLeft(): void
    + jump(): void
    + collectFireFlower(): void
    + shootFireball(): void
    + updateFireballs(blocks: vector<sf::Sprite>&): void
    + getCoins(): void
    + loseLife(): void
    + addLife(): void
    + grow(): void
    + shrink(): void
    + collectEtoile(): void
    + respawn(): void
    + addScore(points: int): void
    + shouldRespawn(): bool
  }

  class Mouvement {
    - sf::Sprite& sprite
    - float speed
    - bool isJumping
    - float velocityY
    - float gravity
    - float jumpStrength
    - float hangTime
    - float hangCounter
    
    + Mouvement(spr: sf::Sprite&, spd: float)
    + moveRight(): void
    + moveLeft(): void
    + jump(): void
    + applyGravity(blocks: vector<sf::Sprite>&, ...): void
    + checkForGaps(gaps: vector<sf::FloatRect>&): void
    + blockMovement(obstacles: vector<sf::Sprite>&, ...): pair<bool, bool>
    + setSpeed(newSpeed: float): void
    + isInAir(): bool
  }

  class AIPlayer {
    - Player* character
    - std::vector<const Enemy*> enemies
    - std::mt19937 rng
    - int decisionCooldown
    - std::string currentAction
    - int actionDuration
    - float jumpTimer
    - bool m_shouldJump
    - bool m_shouldMoveRight
    - bool m_shouldMoveLeft
    - bool m_shouldShootFireball
    
    + AIPlayer(character: Player*, enemies: vector<unique_ptr<Enemy>>&)
    + update(groundTiles: vector<sf::Sprite>&, ...): void
    + shouldMoveRight(): bool
    + shouldMoveLeft(): bool
    + shouldJump(): bool
    + shouldShootFireball(): bool
    - makeDecision(): void
    - executeAction(): void
    - avoidEnemies(): void
    - avoidObstacles(obstacles: vector<sf::Sprite>&, ...): void
    - detectGapAhead(groundTiles: vector<sf::Sprite>&): bool
    - moveTowardsFlag(flag: sf::Sprite&): void
  }

  class Fireball {
    - sf::Texture texture
    - sf::Sprite sprite
    - float speed
    - float gravity
    - float velocityY
    - bool active
    - float initialX
    
    + Fireball(x: float, y: float, direction: float)
    + update(blocks: vector<sf::Sprite>&): void
    + draw(window: sf::RenderWindow&): void
    + isActive(): bool
    + destroy(): void
    + getBounds(): sf::FloatRect
  }
}

package "Enemy System" {
  abstract class Enemy {
    # sf::Texture texture
    # sf::Sprite sprite
    # bool alive
    # bool movingRight
    # Mouvement mouvement
    # float speed
    # bool isFalling
    # float fallSpeed
    # const float GRAVITY
    # std::vector<sf::Sprite> currentBlocks
    # std::vector<sf::Sprite> currentPipes
    
    + {abstract} update(): void
    + interactWithPlayer(player: Player&): void
    + {abstract} onJumpedOn(): void
    + onFireballHit(): void
    + checkForGaps(gaps: vector<sf::FloatRect>&): void
    + fall(): void
    + isAlive(): bool
    + getBounds(): sf::FloatRect
    + draw(window: sf::RenderWindow&): void
    + reverseDirection(): void
    # handleCollisions(oldPosition: sf::Vector2f&): void
  }

  class Goomba {
    + Goomba(x: float, y: float)
    + update(): void
    + interactWithPlayer(player: Player&): void
    + onJumpedOn(): void
    + onFireballHit(): void
    + reverseDirection(): void
    - handleCollisionsGoomba(oldPosition: sf::Vector2f&): void
  }

  class KoopaTroopa {
    - sf::Texture koopaShell
    - bool inShellState
    
    + KoopaTroopa(x: float, y: float)
    + update(): void
    + interactWithPlayer(player: Player&): void
    + onJumpedOn(): void
    + onFireballHit(): void
    + reverseDirection(): void
    # handleCollisions(oldPosition: sf::Vector2f&): void
  }

  class FriendlyMushroom {
    + FriendlyMushroom(x: float, y: float)
    + update(): void
    + interactWithPlayer(player: Player&): void
    + onJumpedOn(): void
    + reverseDirection(): void
  }
}

package "Collectibles" {
  class Coin {
    - sf::Texture texture
    - sf::Sprite sprite
    - bool collected
    
    + Coin(x: float, y: float)
    + draw(window: sf::RenderWindow&): void
    + collect(): void
    + isCollected(): bool
    + getBounds(): sf::FloatRect
  }

  class FireFlower {
    - sf::Texture texture
    - sf::Sprite sprite
    - bool collected
    
    + FireFlower(x: float, y: float)
    + draw(window: sf::RenderWindow&): void
    + collect(): void
    + isCollected(): bool
    + getBounds(): sf::FloatRect
  }

  class Etoile {
    - sf::Texture texture
    - sf::Sprite sprite
    - bool collected
    
    + Etoile(x: float, y: float)
    + draw(window: sf::RenderWindow&): void
    + collect(): void
    + isCollected(): bool
    + getBounds(): sf::FloatRect
  }
}

' Relationships with annotations
Player --> Mouvement : utilise pour se déplacer >
Player --> Fireball : tire >
Enemy --> Mouvement : utilise pour se déplacer >
Enemy <|-- Goomba : est un <
Enemy <|-- KoopaTroopa : est un <
Enemy <|-- FriendlyMushroom : est un <

AIPlayer --> Player : contrôle >
AIPlayer --> Enemy : évite >


Player ..> Coin : collecte >
Player <.. Coin : augmente le score <
Player ..> FireFlower : collecte >
Player ..> Etoile : collecte >
FireFlower ..> Player : donne pouvoir de feu >
Etoile ..> Player : donne rapidité >

Background <-- Camera : défile avec >

@enduml
