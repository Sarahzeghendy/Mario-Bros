@startuml Game_Essentials

class Game {
  - bool isOver
  - int winner
  - bool aiDead_
  - sf::Font font
  - std::vector<sf::Text> results
  
  + Game()
  + handleWin(playerId: int): void
  + isGameOver(): bool
  + drawResult(window: sf::RenderWindow&): void
  + handleAIDeath(): void
  + isAIDead(): bool
}

class Background {
  - sf::RectangleShape sky
  - sf::Texture groundBlock
  - sf::Texture questionBlock
  - sf::Texture questionBlockTexture
  - sf::Texture pipeTexture
  - sf::Texture cloudTexture
  - sf::Texture hillTexture
  - sf::Texture flagTexture
  - std::vector<sf::Sprite> groundTiles
  - std::vector<sf::Sprite> questionBlocks
  - std::vector<sf::Sprite> pipes
  - std::vector<sf::Sprite> hills
  - std::vector<sf::Sprite> clouds
  - std::vector<sf::Sprite> bricks
  - std::vector<sf::FloatRect> gaps
  - sf::Sprite flag
  - bool flagPlaced
  
  + Background()
  + draw(window: sf::RenderWindow&): void
  + getGroundTiles(): const std::vector<sf::Sprite>&
  + getPipes(): const std::vector<sf::Sprite>&
  + getQuestionBlocks(): const std::vector<sf::Sprite>&
  + getFlag(): const sf::Sprite&
  + getGaps(): std::vector<sf::FloatRect>
  - loadMap(filePath: string): void
}

class Camera {
  - sf::View view
  - float defaultWidth
  - float defaultHeight
  - float minX
  - float maxX
  - float minY
  - float maxY
  
  + Camera(width: float, height: float)
  + update(windowSize: sf::Vector2u): void
  + getView(): const sf::View&
  + setCenter(x: float, y: float): void
  - clampPosition(x: float&, y: float&): void
}

class Menu {
  - sf::Font font
  - std::vector<sf::Text> menuOptions
  - int selectedIndex
  - sf::RectangleShape selector
  - std::vector<sf::Texture> frames
  - sf::Sprite backgroundSprite
  - sf::Clock frameClock
  - int currentFrame
  
  + Menu(width: float, height: float)
  + draw(window: sf::RenderWindow&): void
  + moveUp(): void
  + moveDown(): void
  + getSelectedIndex(): int
  + showRules(): void
}

class Score {
  - sf::Texture iconTexture
  - sf::Texture heartTexture
  - sf::Sprite icon
  - sf::Text scoreText
  - sf::Font font
  - bool isLivesDisplay
  - std::vector<sf::Sprite> hearts
  - const int MAX_HEARTS = 5
  
  + Score(iconPath: string, font: sf::Font&, isLivesDisplay: bool)
  + setPosition(x: float, y: float): void
  + update(value: int): void
  + draw(window: sf::RenderWindow&): void
}

note top of Game
  Contrôle l'état du jeu (IA), les conditions de victoire,
  et affiche les résultats finaux
end note

note top of Background
  Gère la disposition du niveau incluant le sol,
  les tuyaux, les blocs à questions, les éléments
  décoratifs et les trous
end note

note top of Camera
  Contrôle la vue qui suit les joueurs à travers
  le niveau avec des limites de bordure
end note

note top of Menu
  Gère l'interface du menu principal avec un
  arrière-plan animé et la navigation entre
  les options
end note

note top of Score
  Affiche soit les scores numériques soit
  le compteur de vies basé sur des cœurs
  pour chaque joueur
end note

' Relationships
Menu ..> Game : démarre >
Camera ..> Background : observe >

@enduml
